# Docker Compose للإنتاج
version: '3.8'

services:
  # الواجهة الخلفية
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mubdi-ai-backend-prod
    restart: unless-stopped
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PORT=8000
      - HOST=0.0.0.0
      - DEBUG=false
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=https://mubdi-ai.example.com
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - mubdi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # الواجهة الأمامية
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: mubdi-ai-frontend-prod
    restart: unless-stopped
    environment:
      - VITE_API_URL=https://api.mubdi-ai.example.com
      - NODE_ENV=production
    networks:
      - mubdi-network
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mubdi-ai-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - mubdi-network
    depends_on:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Redis للتخزين المؤقت (اختياري)
  redis:
    image: redis:7-alpine
    container_name: mubdi-ai-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - mubdi-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    profiles:
      - with-redis

  # PostgreSQL قاعدة البيانات (اختياري)
  postgres:
    image: postgres:15-alpine
    container_name: mubdi-ai-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mubdi_ai}
      - POSTGRES_USER=${POSTGRES_USER:-mubdi_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - mubdi-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    profiles:
      - with-database

  # Prometheus للمراقبة (اختياري)
  prometheus:
    image: prom/prometheus:latest
    container_name: mubdi-ai-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mubdi-network
    profiles:
      - monitoring

  # Grafana للمراقبة (اختياري)
  grafana:
    image: grafana/grafana:latest
    container_name: mubdi-ai-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - mubdi-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  mubdi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local